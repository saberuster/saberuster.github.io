<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>文章列表 on saberuster 的博客</title>
    <link>https://saberuster.github.io/posts/</link>
    <description>Recent content in 文章列表 on saberuster 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>saberuster@gmail.com (saberuster)</managingEditor>
    <webMaster>saberuster@gmail.com (saberuster)</webMaster>
    <copyright>&amp;copy;{year} saberuster, All Rights Reserved</copyright>
    <lastBuildDate>Wed, 17 Feb 2021 20:54:46 +0000</lastBuildDate>
    
        <atom:link href="https://saberuster.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>[Rust Std Trait] std::ops 初见</title>
        <link>https://saberuster.github.io/posts/rust-trait-05/</link>
        <pubDate>Wed, 17 Feb 2021 20:54:46 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Wed, 17 Feb 2021 20:54:46 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-trait-05/</guid>
        <description>前言 由于 ops 中的很多 trait 功能类似，所以就不一个一个来了。本篇文章以最短的篇幅概括 std::ops 中还未提及的主要知识点。 运算符重载 最基础的就是对四则运算之类的</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>[Rust Std Trait] Drop 初见</title>
        <link>https://saberuster.github.io/posts/rust-trait-04/</link>
        <pubDate>Tue, 16 Feb 2021 17:27:35 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Tue, 16 Feb 2021 17:27:35 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-trait-04/</guid>
        <description>前言 在平时的开发中，我们可能需要利用析构函数来做一些收尾工作。在 Rust 中我们可以利用 Drop trait 来实现。本篇文章将会用最短的篇幅覆盖 Drop 的主要知识点。 impl Drop</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>[Rust Std Trait] Copy/Clone 初见</title>
        <link>https://saberuster.github.io/posts/rust-trait-03/</link>
        <pubDate>Tue, 16 Feb 2021 17:14:28 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Tue, 16 Feb 2021 17:14:28 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-trait-03/</guid>
        <description>前言 Copy 作为能够影响编译器行为的 trait 对我们理解 Rust 基础有着重要作用，而 Clone 是我们作为搬砖工人能够自定义复制行为的 trait。本篇文章将会用最短的篇幅</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>Rust</category>
            
          
            
              <category>Rust Std</category>
            
          
            
              <category>Programing</category>
            
          
            
              <category>Rust trait</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>[Rust Std Trait] (Partial)Ord/Eq 初见</title>
        <link>https://saberuster.github.io/posts/rust-trait-02/</link>
        <pubDate>Mon, 15 Feb 2021 08:42:43 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Mon, 15 Feb 2021 08:42:43 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-trait-02/</guid>
        <description>前言 由于需要考虑全序关系（例如 Rust 浮点数中的 NaN），Rust 中有两套 trait 分别定义满足“全序”关系的 Ord/Eq 只能构成“偏序”关系的 PartialOrd</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>Rust</category>
            
          
            
              <category>Rust Std</category>
            
          
            
              <category>Programing</category>
            
          
            
              <category>Rust trait</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>[Rust Std Trait] Default 初见</title>
        <link>https://saberuster.github.io/posts/rust-trait-01/</link>
        <pubDate>Sun, 14 Feb 2021 11:56:26 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Sun, 14 Feb 2021 11:56:26 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-trait-01/</guid>
        <description>前言 本文致力于用最短的篇幅覆盖标准库中Default trait的主要知识点。 功能介绍 Default trait 可以用于定义类型的默认值。基础用法举例： 1 2 3 4 5 6</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>Rust</category>
            
          
            
              <category>Rust Std</category>
            
          
            
              <category>Programing</category>
            
          
            
              <category>Rust trait</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>UE4 中一种 Blueprint&amp;C&#43;&#43; 统一化接口的小技巧</title>
        <link>https://saberuster.github.io/posts/ue4-02/</link>
        <pubDate>Tue, 02 Feb 2021 04:55:01 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Tue, 02 Feb 2021 04:55:01 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/ue4-02/</guid>
        <description>问题描述 在ue4开发中本人之前一直有一种接口定义的困境，定义支持蓝图的接口吧在代码里用着不舒服，有点影响开发效率。定义只支持C++的接口吧蓝</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>折腾日记</category>
            
          
            
              <category>UE4</category>
            
          
            
              <category>动画</category>
            
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>在虚幻4中使用 Mixamo 的动画</title>
        <link>https://saberuster.github.io/posts/ue4-01/</link>
        <pubDate>Fri, 08 Jan 2021 18:38:20 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Fri, 08 Jan 2021 18:38:20 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/ue4-01/</guid>
        <description>前言 作为虚幻4的白嫖党，Mixamo 一定是不能错过的。本篇文章总结了 Mixamo 中动画迁移到虚幻4项目中的知识点。 导入基础骨架 Mixamo 中动画的骨架和虚幻4小</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>折腾日记</category>
            
          
            
              <category>UE4</category>
            
          
            
              <category>动画</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>【Houdini Tips】给输入设置默认几何体</title>
        <link>https://saberuster.github.io/posts/houdini-tips-01/</link>
        <pubDate>Sun, 03 Jan 2021 07:34:42 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Sun, 03 Jan 2021 07:34:42 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/houdini-tips-01/</guid>
        <description>在使用 Houdini 构建自己的 HDA 工具的时候经常会需要通过 Input 传入基础几何体信息。而我们又希望在无输入的情况下能有个默认值效果。经过几个 HDA 工具的开发，自己简</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>折腾日记</category>
            
          
            
              <category>Houdini</category>
            
          
            
              <category>3D美术</category>
            
          
            
              <category>Houdini Tips</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>将houdini procedural modeling加入自己的工作流</title>
        <link>https://saberuster.github.io/posts/houdini-01/</link>
        <pubDate>Mon, 23 Nov 2020 10:13:03 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Mon, 23 Nov 2020 10:13:03 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/houdini-01/</guid>
        <description>前言 本来近期想在blender里面做一小套场景拿到UE4里面测试一下光照和后期的。陆陆续续做了些场景内容后发现一个很让我头疼的问题：每次我想</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>折腾日记</category>
            
          
            
              <category>Houdini</category>
            
          
            
              <category>3D美术</category>
            
          
            
              <category>工具链</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>使用hugo重建我的博客</title>
        <link>https://saberuster.github.io/posts/my-first-post/</link>
        <pubDate>Thu, 12 Nov 2020 12:47:01 +0800</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Thu, 12 Nov 2020 12:47:01 +0800</atom:modified>
        <guid>https://saberuster.github.io/posts/my-first-post/</guid>
        <description>前言 依稀记得上次折腾自己的博客还是2018年。后来感觉无非就是写博客展示出来，啥平台都可以啊。所以之后又在零零散散几个能写文章的平台（例如知</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>折腾日记</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>