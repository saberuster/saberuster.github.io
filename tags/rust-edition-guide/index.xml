<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Rust Edition Guide on saberuster 的博客</title>
    <link>https://saberuster.github.io/tags/rust-edition-guide/</link>
    <description>Recent content in Rust Edition Guide on saberuster 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>saberuster@gmail.com (saberuster)</managingEditor>
    <webMaster>saberuster@gmail.com (saberuster)</webMaster>
    <copyright>&amp;copy;{year} saberuster, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 01 Mar 2021 11:34:37 +0000</lastBuildDate>
    
        <atom:link href="https://saberuster.github.io/tags/rust-edition-guide/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>[Rust 基础知识]动态分派和静态分派</title>
        <link>https://saberuster.github.io/posts/rust-basic-07/</link>
        <pubDate>Mon, 01 Mar 2021 11:34:37 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Mon, 01 Mar 2021 11:34:37 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-basic-07/</guid>
        <description>前言 本文主要包含动态分派和静态分派的主要知识点。 静态分派 静态分派就是指程序具体调用哪个函数在编译阶段就能确定下来。Rust 中可以通过泛型和 impl</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>Rust</category>
            
          
            
              <category>Rust Edition Guide</category>
            
          
            
              <category>Programing</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>[Rust 基础知识]模式解构</title>
        <link>https://saberuster.github.io/posts/rust-basic-06/</link>
        <pubDate>Sun, 28 Feb 2021 07:39:50 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Sun, 28 Feb 2021 07:39:50 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-basic-06/</guid>
        <description>前言 模式结构是写 Rust 代码中最常用到的设计。本文主要关注模式解构的相关知识点。 一般形式 模式解构可以用在： let 声明 函数和闭包的参数列表 match 表达式 if let 表</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>Rust</category>
            
          
            
              <category>Rust Edition Guide</category>
            
          
            
              <category>Programing</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>[Rust 基础知识]初探泛型</title>
        <link>https://saberuster.github.io/posts/rust-basic-05/</link>
        <pubDate>Sun, 28 Feb 2021 02:53:16 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Sun, 28 Feb 2021 02:53:16 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-basic-05/</guid>
        <description>前言 本文囊括 Rust 中泛型的主要知识点。 泛型的一般形式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 enum MyOption&amp;lt;T&amp;gt;{Some(T),None,}struct Num&amp;lt;T=i32&amp;gt;{data: Option&amp;lt;T&amp;gt;}fn test_fn&amp;lt;T&amp;gt;(param: T)-&amp;gt; bool fntest_fn&amp;lt;T,U&amp;gt;(param: T,param2: U)-&amp;gt; bool impl&amp;lt;T,U&amp;gt;Into&amp;lt;U&amp;gt;forTwhereU: From&amp;lt;T&amp;gt;{fn into(self)-&amp;gt; U{U::from(self)}} 泛型参数约束 Rust 中有两种</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>Rust</category>
            
          
            
              <category>Rust Edition Guide</category>
            
          
            
              <category>Programing</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>[Rust 基础知识]初探生命周期标记</title>
        <link>https://saberuster.github.io/posts/rust-basic-04/</link>
        <pubDate>Sat, 27 Feb 2021 03:23:02 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Sat, 27 Feb 2021 03:23:02 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-basic-04/</guid>
        <description>前言 生命周期标记主要用来处理生命周期跨函数时的情况。 标记形式 生命周期标记的一般形式： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &amp;amp;i32// a reference &amp;amp;&amp;#39;ai32// a reference with an explicit lifetime</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>Rust</category>
            
          
            
              <category>Rust Edition Guide</category>
            
          
            
              <category>Programing</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>[Rust 基础知识]借用与借用规则</title>
        <link>https://saberuster.github.io/posts/rust-basic-03/</link>
        <pubDate>Wed, 24 Feb 2021 20:02:06 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Wed, 24 Feb 2021 20:02:06 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-basic-03/</guid>
        <description>前言 本文以最短篇幅概括借用和借用规则的相关知识点。 借用 在 Rust 中，变量除了可以直接进行所有权转移，还可以借用。借用分为两种：只读借用（&amp;amp;</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>Rust</category>
            
          
            
              <category>Rust Edition Guide</category>
            
          
            
              <category>Programing</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>[Rust 基础知识]所有权与移动语义</title>
        <link>https://saberuster.github.io/posts/rust-basic-02/</link>
        <pubDate>Tue, 23 Feb 2021 16:00:30 +0000</pubDate>
        <author>saberuster@gmail.com (saberuster)</author>
        <atom:modified>Tue, 23 Feb 2021 16:00:30 +0000</atom:modified>
        <guid>https://saberuster.github.io/posts/rust-basic-02/</guid>
        <description>前言 本文以最短篇幅概述 Rust 所有权和移动语义的基础知识点。之后几篇都会是所有权和生命周期的文章，这里先把基础的点整理一下。 想解决的问题 思考以下场</description>
        
        <dc:creator>saberuster</dc:creator>
        
        
        
        
          
            
              <category>Rust</category>
            
          
            
              <category>Rust Edition Guide</category>
            
          
            
              <category>Programing</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>